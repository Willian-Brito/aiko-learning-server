name: Continuous Integration

on:
  push:
    branches:
      - main

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:

  # ======================================================
  # 1. Versionamento do Projeto
  # ======================================================
  versioning:
    runs-on: ubuntu-latest
    name: Versioning

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0 
      
      - uses:  codacy/git-version@2.8.3
        id: version
        with:
          release-branch: main
          prefix: v

      - name: Repository Tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::notice:: ${{ steps.version.outputs.version }}"
          git config --global user.email "${{ github.actor }}"@users.noreply.github.com
          git config --global user.name "${{ github.actor }}"
          git tag -a "${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
          git push --tags
        if: github.ref == 'refs/heads/main'
      
      - name: Create file version
        run: |
          echo ${{ steps.version.outputs.version }} > version.txt
        if: github.ref == 'refs/heads/main'

      - uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
        if: github.ref == 'refs/heads/main'

  # ======================================================
  # 2. Build e Testes do Backend
  # ======================================================
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test
    needs: versioning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      - name: Restore
        run: |
            dotnet restore ./AikoLearning.sln
  
      - name: Build
        run: |          
            dotnet build --no-restore --configuration Release ./AikoLearning.sln
      
      - name: Test
        run: |                          
            dotnet test ./AikoLearning.sln --no-restore --no-build --configuration Release --logger trx --results-directory "TestResults"

      - uses: actions/upload-artifact@v4
        with:
            name: dotnet-test-results
            path: TestResults  

  # ======================================================
  # 3. Análise de Segurança de Código (SAST)
  # ======================================================
  sast:
    runs-on: ubuntu-latest
    needs: versioning
    name: SAST - Horusec Scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SAST - Horusec Run
        run: |
          curl -sL https://raw.githubusercontent.com/Willian-Brito/dev-sec-ops-learning/refs/heads/main/tools/horusec/horusec_docker_linux.sh| bash

      - name: SAST - Horusec Report Generation
        run: |
          cd reports
          curl -sL https://raw.githubusercontent.com/Willian-Brito/dev-sec-ops-learning/refs/heads/main/tools/horusec/horusec_json2md/horusec_json2md.py -o horusec_json2md.py 
          python3 horusec_json2md.py horusec_report.json horusec_report.md       

      - name: SAST - Horusec Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: horusec-report
          path: reports/horusec_report.md

      - name: SAST - Horusec Results In Summary
        run: cat reports/horusec_report.md >> $GITHUB_STEP_SUMMARY

  # ======================================================
  # 4.  Análise de Segurança das Dependências (SCA)
  # ======================================================
  sca:
    needs: versioning
    runs-on: ubuntu-latest
    name: SCA - Dependency Check Scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Java (required for Dependency-Check)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run OWASP Dependency-Check
        
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: '${{ github.repository }}'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: |              
            --scan .
            --enableRetired
        env:
          JAVA_HOME: /opt/jdk

      - name: Upload vulnerability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  # ======================================================
  # 5. Análise de Segurança de Infra como Código (IaC)
  # ======================================================
  iac:
    needs: versioning
    runs-on: ubuntu-latest
    name: IaC - Kics Scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Kics Scan
        uses: checkmarx/kics-github-action@v2.1.13
        with:          
          path: '.'
          ignore_on_exit: results
          output_path: reports/

      - name: Display kics results
        run: |
          cat reports/results.json

      - name: Upload vulnerability report        
        uses: actions/upload-artifact@v4
        with:
          name: kics-report
          path: reports/

  # ======================================================
  # 6. Build da Imagem Docker
  # ======================================================
  docker-build:
    needs: [versioning, build-and-test, sast, sca, iac]
    runs-on: ubuntu-latest
    name: Build Docker Image

    env:
      version: ${{ needs.versioning.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build -t ${{ vars.DOCKERHUB_REPOSITORY }}/aiko-learning-api:${{ env.version }} \
            -f ./Presentation/WebAPI/Dockerfile .

      - name: Save Docker image as artifact
        run: |
          docker save ${{ vars.DOCKERHUB_REPOSITORY }}/aiko-learning-api:${{ env.version }} -o image.tar

      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  # ======================================================
  # 7. Analise de Segurança da Imagem Docker
  # ======================================================
  container-scan:
    needs: [versioning, docker-build]
    runs-on: ubuntu-latest
    name: Container Scan - Trivy Scan Docker Image

    env:
      version: ${{ needs.versioning.outputs.version || github.sha }}

    steps:

      - name: Debug version
        run: echo "version=${{ env.version }}"

      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: '${{ vars.DOCKERHUB_REPOSITORY }}/aiko-learning-api:${{ env.version }}'
          severity: 'MEDIUM,HIGH,CRITICAL'          
          exit-code: '0'
          format: 'json'
          output: 'trivy-report.json'
      
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  # ======================================================
  # 8. Push da Imagem para o Docker Hub
  # ======================================================
  docker-push:
    needs: [versioning, container-scan]
    runs-on: ubuntu-latest
    name: Push Docker Image

    env:
      version: ${{ needs.versioning.outputs.version }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag as Latest
        run: |
          docker tag ${{ vars.DOCKERHUB_REPOSITORY }}/aiko-learning-api:${{ env.version }} \
                    ${{ vars.DOCKERHUB_REPOSITORY }}/aiko-learning-api:latest
        if: github.ref == 'refs/heads/main'

      - name: Push Docker Image
        run: docker push --all-tags ${{ vars.DOCKERHUB_REPOSITORY }}/aiko-learning-api